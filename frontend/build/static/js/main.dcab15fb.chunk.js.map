{"version":3,"sources":["components/landing.component.jsx","components/inv.component.jsx","components/about.component.jsx","components/navigation.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Landing","useState","setEvents","setPopular","useEffect","Promise","all","fetch","then","rawEve","json","rawProducts","results","aria-label","Announcemnts","announce","setAnnounce","raw","data","forEach","ele","name","msg","desc","date","Announcement","className","Carosuel","setImgs","Events","events","method","headers","map","eve","description","Event","Inv","About","NavBar","CurrEle","setCurrEle","console","log","window","onpopstate","storeLast","eles","home","inv","about","handleClick","e","preventDefault","history","pushState","undefined","location","host","target","value","eleArr","pathname","split","length","Object","keys","elem","elementKey","Link","onClick","App","loc","setLoc","contact","setContact","text","rawCom","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAEaA,EAAU,WAAO,IAAD,EACGC,qBADH,mBACVC,GADU,aAEKD,qBAFL,mBAETE,GAFS,WAczB,OAVAC,qBAAU,WACNC,QAAQC,IAAI,CACRC,MAAM,mBAAmBC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UAC/CH,MAAM,+BAA+BC,MAAK,SAAAG,GAAW,OAAIA,EAAYD,YACtEF,MAAK,SAAAI,GACJV,EAAUU,EAAQ,IAClBT,EAAWS,EAAQ,SAExB,IAGC,8BACI,kBAAC,EAAD,MACA,6BAASC,aAAY,WACjB,wCACA,qFAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,QAKNC,EAAe,WAAO,IAAD,EACSb,qBADT,mBAChBc,EADgB,KACNC,EADM,KASvB,OANAZ,qBAAU,WACNG,MAAM,0BACDC,MAAK,SAAAS,GAAG,OAAIA,EAAIP,UAChBF,MAAK,SAAAU,GAAI,OAAIF,EAAYE,QAC/B,IAGC,6BAASL,aAAY,iBAChBE,EAASI,SAAQ,SAAAC,GACd,OAAO,kBAAC,EAAD,CAAcC,KAAMD,EAAIC,KACVC,IAAKF,EAAIG,KACTC,KAAMJ,EAAII,YAMzCC,EAAe,SAAC,GAAuB,IAAtBJ,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,IAAKE,EAAU,EAAVA,KAC9B,OACI,6BAASX,aAAYQ,GACjB,wBAAIK,UAAW,aAAcF,GAC7B,uBAAGE,UAAW,aAAcJ,KAKlCK,EAAW,WAAO,IAAD,EACK1B,qBADL,mBACN2B,GADM,WASnB,OANAxB,qBAAU,WACNG,MAAM,qBACDC,MAAK,SAAAS,GAAG,OAAIA,EAAIP,UAChBF,MAAK,SAAAU,GAAI,OAAIU,EAAQV,QAC3B,IAGC,yBAAKQ,UAAU,cAIjBG,EAAS,WAAO,IAAD,EACW5B,qBADX,mBACV6B,EADU,KACF5B,EADE,KAcjB,OAXAE,qBAAU,WACNG,MAAM,kBAAmB,CACrBwB,OAAQ,MACRC,QAAS,CACL,eAAe,sBAGtBxB,MAAK,SAAAS,GAAG,OAAIA,EAAIP,UAChBF,MAAK,SAAAU,GAAI,OAAIhB,EAAUgB,QACzB,IAGC,6BAASL,aAAY,UAChBiB,EAAOG,KAAI,SAAAC,GACR,OAAO,kBAAC,EAAD,CAAOb,KAAMa,EAAIb,KACVc,YAAaD,EAAIX,KACjBC,KAAMU,EAAIV,YAOlCY,EAAQ,SAAC,GAAiC,IAA/Bf,EAA8B,EAA9BA,KAAMc,EAAwB,EAAxBA,YAAaX,EAAW,EAAXA,KAChC,OACI,6BAASX,aAAYQ,GACjB,wBAAIK,UAAW,aAAcF,GAC7B,uBAAGE,UAAW,aAAcS,KCpG3BE,EAAM,WACf,OAAQ,6CCDCC,EAAQ,WACjB,OAAQ,6CCECC,EAAS,WAAO,IAAD,EACMtC,mBAAS,QADf,mBACjBuC,EADiB,KACRC,EADQ,KAGxBrC,qBAAU,WACNsC,QAAQC,IAAR,UAAeH,EAAQnB,KAAvB,yBACAuB,OAAOC,WAAaC,IACrB,CAACN,IAEJ,IAAMO,EAAO,CACTC,KAAMhD,EACNiD,IAAKZ,EACLa,MAAOZ,GAILa,EAAc,SAAAC,GAChBA,EAAEC,iBACFT,OAAOU,QAAQC,UACX,QACAC,EAFJ,iBAGcZ,OAAOa,SAASC,KAH9B,YAGyD,YAAnBN,EAAEO,OAAOC,WAAsBJ,EAAYJ,EAAEO,OAAOC,QAC1FnB,EAAWW,EAAEO,OAAOC,QAGlBd,EAAY,SAAAM,GACdA,EAAEC,iBACF,IAAIQ,EAASjB,OAAOa,SAASK,SAASC,MAAM,KAE5CtB,EAAyC,KAA9BoB,EAAOA,EAAOG,OAAS,GAAY,UAAYH,EAAOA,EAAOG,OAAS,KAIrF,OACI,oCACI,yBAAKtC,UAAW,UACXuC,OAAOC,KAAKnB,GAAM5B,SAAQ,SAAAgD,GACvB,OAAO,kBAAC,EAAD,CAAM9C,KAAM0B,EAAKoB,GAAM9C,KAClB+C,WAAYD,EACZhB,YAAaA,QAGjC,kBAACX,EAAD,QAKN6B,EAAO,SAAC,GAAsC,IAArChD,EAAoC,EAApCA,KAAM+C,EAA8B,EAA9BA,WAAYjB,EAAkB,EAAlBA,YAC7B,OACI,4BAAQzB,UAAW,UACX4C,QAASnB,EACTS,MAAOQ,GAAa/C,ICvBrBkD,MA7Bf,WAAgB,IAAD,EACStE,qBADT,mBACNuE,EADM,KACDC,EADC,OAEiBxE,qBAFjB,mBAENyE,EAFM,KAEGC,EAFH,KAeb,OAXAvE,qBAAU,WACRC,QAAQC,IAAI,CACVC,MAAM,qBAAqBC,MAAK,SAAAS,GAAG,OAAIA,EAAI2D,UAC3CrE,MAAM,oBAAoBC,MAAK,SAAAqE,GAAM,OAAIA,EAAOnE,YAEjDF,MAAK,SAAAI,GACJ6D,EAAO7D,EAAQ,IACf+D,EAAW/D,EAAQ,SAEpB,IAGD,oCACE,4BAAQc,UAAW,UACf,gDACA,8BAEJ,kBAAC,EAAD,MACA,gCACI,4BAAK8C,EAAL,IAAWE,MCdDI,QACW,cAA7BlC,OAAOa,SAASsB,UAEe,UAA7BnC,OAAOa,SAASsB,UAEhBnC,OAAOa,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/E,MAAK,SAAAgF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.dcab15fb.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nexport const Landing = () => {\r\n    const [events, setEvents] = useState();\r\n    const [popular, setPopular] = useState();\r\n\r\n    useEffect(() => {\r\n        Promise.all([\r\n            fetch(\"/general/events\").then(rawEve => rawEve.json()),\r\n            fetch(\"/inventory/products/popular\").then(rawProducts => rawProducts.json())\r\n        ]).then(results => {\r\n            setEvents(results[0]);\r\n            setPopular(results[1]);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <main>\r\n            <Carosuel />\r\n            <section aria-label={\"welcome\"}>\r\n                <h2>Welcome!</h2>\r\n                <span>Consider leaving us a reivew on your favorite site</span>\r\n            </section>\r\n            <Announcemnts />\r\n            <Events />\r\n        </main>\r\n    );\r\n}\r\n\r\nconst Announcemnts = () => {\r\n    const [announce, setAnnounce] = useState();\r\n\r\n    useEffect(() => {\r\n        fetch(\"/general/announcements\")\r\n            .then(raw => raw.json())\r\n            .then(data => setAnnounce(data));\r\n    }, []);\r\n\r\n    return (\r\n        <section aria-label={\"announcements\"}>\r\n            {announce.forEach(ele => {\r\n                return <Announcement name={ele.name}\r\n                                     msg={ele.desc}\r\n                                     date={ele.date} />\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\nconst Announcement = ({name, msg, date}) => {\r\n    return (\r\n        <article aria-label={name}>\r\n            <h2 className={\"card-date\"}>{date}</h2>\r\n            <p className={\"card-desc\"}>{msg}</p>\r\n        </article>\r\n    )\r\n}\r\n\r\nconst Carosuel = () => {\r\n    const [imgs, setImgs] = useState();\r\n\r\n    useEffect(() => {\r\n        fetch(\"/landing_pictures\")\r\n            .then(raw => raw.json())\r\n            .then(data => setImgs(data));\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"Carosuel\"></div>\r\n    )\r\n}\r\n\r\nconst Events = () => {\r\n    const [events, setEvents] = useState(); // No initial state on purpose\r\n    \r\n    useEffect(() => {\r\n        fetch(\"/general/events\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\":\"application/json\"\r\n            }\r\n        })\r\n        .then(raw => raw.json())\r\n        .then(data => setEvents(data));\r\n    }, []); // Empty should ensure that only refresh with component?\r\n\r\n    return (\r\n        <section aria-label={\"events\"}>\r\n            {events.map(eve => {\r\n                return <Event name={eve.name}\r\n                              description={eve.desc}\r\n                              date={eve.date} />\r\n            })}\r\n        </section>\r\n    )\r\n}\r\n\r\n// Pure functional component\r\nconst Event = ({ name, description, date }) => {\r\n    return (\r\n        <article aria-label={name}>\r\n            <h3 className={\"card-date\"}>{date}</h3>\r\n            <p className={\"card-desc\"}>{description}</p>\r\n        </article>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Inv = () => {\r\n    return (<h1>Coming soon!</h1>);\r\n}","import React from 'react';\r\n\r\nexport const About = () => {\r\n    return (<h1>Coming soon!</h1>)\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Landing } from './landing.component.jsx';\r\nimport { Inv } from './inv.component.jsx';\r\nimport { About } from './about.component.jsx';\r\n\r\nexport const NavBar = () => {\r\n    const [CurrEle, setCurrEle] = useState(\"home\");\r\n\r\n    useEffect(() => {\r\n        console.log(`${CurrEle.name} is currently active`);\r\n        window.onpopstate = storeLast;\r\n    }, [CurrEle]);\r\n\r\n    const eles = {\r\n        home: Landing,\r\n        inv: Inv,\r\n        about: About\r\n    }\r\n\r\n    // Routing now I guess?\r\n    const handleClick = e => {\r\n        e.preventDefault();\r\n        window.history.pushState(\r\n            {},\r\n            undefined,\r\n            `http://${window.location.host}/${e.target.value === \"Landing\" ? undefined : e.target.value}`);\r\n        setCurrEle(e.target.value);\r\n    }\r\n\r\n    const storeLast = e => {\r\n        e.preventDefault();\r\n        let eleArr = window.location.pathname.split(\"/\");\r\n        // Current component will always be last part of URL in this system (quite crude :/)\r\n        setCurrEle(eleArr[eleArr.length - 1] === \"\" ? \"Landing\" : eleArr[eleArr.length - 1]);\r\n    }\r\n\r\n    // May not need the class actually, due to use of nav tag! :/\r\n    return (\r\n        <>\r\n            <nav className={\"navBar\"}>\r\n                {Object.keys(eles).forEach(elem => {\r\n                    return <Link name={eles[elem].name}\r\n                                elementKey={elem}\r\n                                handleClick={handleClick} />\r\n                })}\r\n            </nav>\r\n            <CurrEle />\r\n        </>\r\n    );\r\n}\r\n\r\nconst Link = ({name, elementKey, handleClick }) => {\r\n    return (\r\n        <button className={\"navButt\"} \r\n                onClick={handleClick}\r\n                value={elementKey}>{name}</button>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\r\nimport { NavBar } from './components/navigation.component.jsx';\r\n\r\nfunction App() {\r\n  const [loc, setLoc] = useState();\r\n  const [contact, setContact] = useState();\r\n\r\n  useEffect(() => {\r\n    Promise.all([\r\n      fetch(\"/general/location\").then(raw => raw.text()),\r\n      fetch(\"/general/contact\").then(rawCom => rawCom.json())\r\n    ])\r\n    .then(results => {\r\n      setLoc(results[0]);\r\n      setContact(results[1]);\r\n    });\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <header className={\"header\"}>\r\n          <h1>The Burning Leaf</h1>\r\n          <hr />\r\n      </header>\r\n      <NavBar />\r\n      <footer>\r\n          <h6>{loc}|{contact}</h6>\r\n      </footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}